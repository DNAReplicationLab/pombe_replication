#!/bin/bash

#SBATCH --mem-per-cpu=10G
#SBATCH -c 1
#SBATCH -p ei-medium
#SBATCH -J convertBedgraphToBed
#SBATCH --mail-type=END,FAIL
#SBATCH --time=23:59:59
#SBATCH --constraint=""

# goal
# -----
# Convert a plus bedgraph and a minus bedgraph or a single bedgraph to a bed file

# usage
#------
# bash convert_bedgraph_to_bed.sh -p <plus bedgraph> -m <minus bedgraph> -u <no strand bedgraph> -f <fasta fai file>
# can use sbatch if this is taking too long
# plus bedgraph: path to the bedgraph with signals corresponding to the plus strand
# minus bedgraph: path to the bedgraph with signals corresponding to the minus strand
# no strand bedgraph: path to the bedgraph with signals corresponding to both strands/no strand,
#                     cannot be used with plus and minus bedgraph
# fasta fai file: path to the fasta fai file. This is used to get the contig names and lengths.
#                 Usually accompanies a fasta file, and can be generated by samtools faidx <fasta file> if needed.

# outputs
# -------
# A bed file is sent to standard output, with bed 3+1 format if no strand bedgraph is used, or bed6 format if plus
# and/or minus bedgraph are used.

# explanation of bed format
# -------------------------
# * Six column bed files are tab-separated with the following columns (and no column names):
#   contig, start, end, name, score, strand.
# * Names are self-explanatory.
# * Scores are usually integers but we allow floating point numbers as well.
# * Strand = +/-/. (plus, minus, no strand/indeterminate).
# * Start < end and end is not included in the interval i.e. the interval includes bases from start to end - 1.
# * Bed3 format is just the first three columns of bed6 format. Bed 3+1 means an additional column can be present.
# * Non-data lines in bed files start with a hash (#) or with the word "track" or "browser".
# * Usually, the name column refers to a feature (e.g. gene) or a read id (e.g. read from a sequencing experiment).
# * Since bedgraphs do not have the name information, we use the name "blank" for all intervals in bed6.

# stop execution if any command fails
set -e

# load git repo labels
source load_git_repo_labels.sh

# load packages
source load_package.sh -bedtools -python

# load configuration
source config.sh

# function to set calling script information
insert_calling_script_header() {
  sed '1i'\
'# from commit '"${COMMITSTR:-NA}"' generated at '"${TIMENOW:-NA}"' by '"${config[name]:-NA}"' <'"${config[email]:-NA}"'>\n'\
'# script: '"$0"'\n'\
'# arguments: '"$*"'\n'\
"# slurm job name: ${SLURM_JOB_NAME:-NA}"
}

# create a temporary bed file to store the output
tmp_bed_file=$(mktemp -p "${config[scratchDir]:-}"/tmp)

# function to print usage
usage() {
  echo "usage: bash $0 -p <plus bedgraph> -m <minus bedgraph> -u <no strand bedgraph> -f <fasta fai file>"
  echo "       If using plus and/or minus bedgraph, Bed6 format is produced in standard output."
  echo "       If using no strand bedgraph, Bed3+1 format is produced in standard output."
  echo "       For more information, see the comments in the script."
  echo "       Can use sbatch if the bash command is taking too long."
}

# parse arguments
while getopts ":p:m:u:f:" opt; do
  case $opt in
    p)
      plus_bedgraph="$OPTARG"
      ;;
    m)
      minus_bedgraph="$OPTARG"
      ;;
    u)
      no_strand_bedgraph="$OPTARG"
      ;;
    f)
      fasta_fai_file="$OPTARG"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      usage
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      usage
      exit 1
      ;;
  esac
done

# check that fasta fai file exists
if [ ! -f "$fasta_fai_file" ]; then
  echo "Error: fasta fai file $fasta_fai_file does not exist."
  usage
  exit 1
fi

# Output bed6 format if plus and/or minus bedgraph are used, otherwise output bed3+1 format
if [ -n "$plus_bedgraph" ] || [ -n "$minus_bedgraph" ]; then

  if [ -n "$no_strand_bedgraph" ]; then
    echo "Error: cannot use plus or minus bedgraph with no strand bedgraph."
    usage
    exit 1
  fi

  if [ ! -f "$plus_bedgraph" ]; then
    plus_bedgraph=/dev/null
  fi
  if [ ! -f "$minus_bedgraph" ]; then
    minus_bedgraph=/dev/null
  fi

  if [ -f "$plus_bedgraph" ] || [ -f "$minus_bedgraph" ]; then
    {
      < "$plus_bedgraph" grep -E -v '^#|^track|^browser' | sed 's/\r//g' | awk -v OFS='\t' '{print $1,$2,$3,"blank",$4,"+"}'
      < "$minus_bedgraph" grep -E -v '^#|^track|^browser' | sed 's/\r//g' | awk -v OFS='\t' '{print $1,$2,$3,"blank",$4,"-"}'
    } | bedtools sort -i - -faidx "$fasta_fai_file" | insert_calling_script_header "$@" > "$tmp_bed_file"
  else
    echo "Error: plus bedgraph $plus_bedgraph and/or minus bedgraph $minus_bedgraph does not exist."
    usage
    exit 1
  fi

else

  if [ ! -f "$no_strand_bedgraph" ]; then
    echo "Error: no strand bedgraph $no_strand_bedgraph does not exist."
    usage
    exit 1
  fi

  {
    < "$no_strand_bedgraph" grep -E -v '^#|^track|^browser' | sed 's/\r//g' | awk -v OFS='\t' '{print $1,$2,$3,$4}'
  } | bedtools sort -i - -faidx "$fasta_fai_file" | insert_calling_script_header "$@" > "$tmp_bed_file"
fi

# bed file must have contigs only in the fasta index file
if [ ! "$(< "$tmp_bed_file" python validate_bed_against_fai.py "$fasta_fai_file")" == "valid" ]; then
  >&2 echo "Error: bedgraphs must have coordinates restricted to the ones in the fasta index file."
  exit 1;
else
  cat "$tmp_bed_file"
fi

# remove temporary bed file
rm "$tmp_bed_file"