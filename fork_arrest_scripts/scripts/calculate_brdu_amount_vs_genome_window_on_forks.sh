#!/bin/bash

#SBATCH --mem-per-cpu=10G
#SBATCH -c 10
#SBATCH -p ei-medium
#SBATCH -J calcBrduAmtVsGenomeWindowOnForks
#SBATCH --mail-type=END,FAIL
#SBATCH --time 23:59:59
#SBATCH --constraint=""

# goal
# =====
# Given fork locations, a mod bam file, a reference genome and a window size, calculate the mean brdu amount
# at each window in the genome across all fork locations that overlap with the window.
# We require 100% coverage of the window by the fork to count it.

# usage
# =====
# sbatch calculate_brdu_amount_vs_genome_window_on_forks.sh fasta_index_file window_size mod_bam_file \
#         left_fork_file right_fork_file
# NOTE: \ means that the command continues on the next line
# fasta_index_file: index file of the fasta reference genome.
#                   E.g. if the reference genome is sacCer3.fa, the index file is usually called sacCer3.fa.fai.
#                   This file can be generated by samtools faidx.
#                   The index file is a tab-delimited file without headers.
#                   We'll use only the first two columns which are chromosome name and length in bp.
# window_size: the size of the window in bp to tile the genome.
# mod_bam_file: the mod bam file containing analogue modification information
# left_fork_file: the left fork file in the format output by forkSense.
# right_fork_file: the right fork file in the format output by forkSense.

# output
# ======
# Output is to stdout, and is in bedgraph format i.e. space-delimited with no headers and five columns:
# contig, start, end, mean_brdu, count.
# The first four fields are self-explanatory, the fifth is the number of forks that overlap with the window.
# Windows with a zero count are not output.
# Output can be redirected to a file.

# fail if any command fails
set -e

# check that the correct number of arguments were provided
if [ "$#" -lt 4 ]
then
    >&2 echo "Error: not enough arguments provided"
    >&2 echo "Usage: sbatch calculate_brdu_amount_vs_genome_window_on_forks.sh fasta_index_file window_size mod_bam_file left_fork_file right_fork_file"
    >&2 echo "fasta_index_file: index file of the fasta reference genome."
    >&2 echo "                  E.g. if the reference genome is sacCer3.fa, the index file is usually called sacCer3.fa.fai."
    >&2 echo "                  This file can be generated by samtools faidx."
    >&2 echo "                  The index file is a tab-delimited file without headers."
    >&2 echo "                  We'll use only the first two columns which are chromosome name and length in bp."
    >&2 echo "window_size: the size of the window in bp to tile the genome."
    >&2 echo "mod_bam_file: the mod bam file containing analogue modification information"
    >&2 echo "left_fork_file: the left fork file in the format output by forkSense."
    >&2 echo "                Can be set to /dev/null if there are no left forks."
    >&2 echo "right_fork_file: the right fork file in the format output by forkSense."
    >&2 echo "                Can be set to /dev/null if there are no right forks."
    >&2 echo "Output is to stdout and is in bedgraph format with five columns: contig, start, end, mean_brdu, count."
    >&2 echo "Windows with a zero count are not output."
    >&2 echo "Output can be redirected to a file"
    exit 1
fi

# set variables
fasta_index_file=$1
window_size=$2
mod_bam_file=$3
left_fork_file=$4
right_fork_file=${5:-/dev/null}

# check that the fasta index file exists
if [ ! -f "$fasta_index_file" ]
then
    >&2 echo "Error: fasta index file $fasta_index_file does not exist"
    exit 1
fi

# check that the window size is a positive integer
if ! [ "$window_size" -gt 0 ]
then
    >&2 echo "Error: window size $window_size is not a positive integer"
    exit 1
fi

# check that the mod bam file exists
if [ ! -f "$mod_bam_file" ]
then
    >&2 echo "Error: mod bam file $mod_bam_file does not exist"
    exit 1
fi

# check that the mod bam file is indexed
if [ ! -f "$mod_bam_file".bai ]
then
    >&2 echo "Error: mod bam file $mod_bam_file is not indexed"
    exit 1
fi

# check that at least one fork file exists
if [ ! -f "$left_fork_file" ] && [ ! -f "$right_fork_file" ]
then
    >&2 echo "Error: need at least one feature file!"
    exit 1
fi

# load bedtools
source load_package.sh -bedtools -python

# load git repo labels
source load_git_repo_labels.sh

# create a temporary file to store windowed information from forks
fork_file_temp=$(mktemp)

# get average brdu per fork over many windows per fork, with window size approx 10 times the given genomic window size.
# we say approximately because the script get_mean_brdu_per_fork.sh needs window size in number of thymidines.
# so we've set the thymidine window size to be 3 times the given genomic window size in base pairs, which is
# approximately equivalent to a window 10 times the given genomic window size in base pairs.
# shellcheck disable=SC2016
bash get_mean_brdu_per_fork.sh "$mod_bam_file" "$left_fork_file" "$right_fork_file" "$((window_size * 3))" |\
  grep -v "^#" | awk -v IFS=" " -v OFS="\t" '{print $1, $2, $3, $4}' |\
  python split_fork_index_from_tsv.py --col 1 '$contig, $2, $3, $read_id, $4, "*"' > "$fork_file_temp"

# use bedtools to sort the temporary file
bedtools sort -i "$fork_file_temp" -faidx "$fasta_index_file" > "$fork_file_temp".sorted

# use bedtools make windows to generate a bed file of windows with the given window size
bedtools makewindows -g "$fasta_index_file" -w "$window_size" > "$fork_file_temp".windows

# print script name and arguments
echo "# from commit ${COMMITSTR} generated at ${TIMENOW}";
echo "# script: $0";
echo "# arguments: $*";

# calculate an average per genomic window using the windowed fork data
# and print five columns: contig, start, end, mean_brdu, count
# excluding all rows with a . in them which means that there were no forks in that window (i.e. count = 0)
bedtools map -a "$fork_file_temp".windows -b "$fork_file_temp".sorted -sorted -g "$fasta_index_file" -f 1.0 -o mean,count |\
    awk 'BEGIN{OFS=" "}{print $1, $2, $3, $4, $5}' | grep -v " \."

# remove the temporary files
rm "$fork_file_temp" "$fork_file_temp".sorted "$fork_file_temp".windows