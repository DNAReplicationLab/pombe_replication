#!/bin/bash

# goal
# -----
# Mask some regions in a heatmap based on a given bed file. (By mask, we mean "render transparent").
# You can pipe the output of this script to plot_heatmap.R.

# use case
# --------
# Let's say we want a heatmap (which will be made by plot_heatmap.R or equivalent) where we just want to show
# left forks, right forks or just origins etc. Then, we use this script to add an additional alpha column to the
# table sent to the heatmap script so that it can mask out some regions using transparency.

# usage
# -----
# cat <heatmap_data> | bash mask_heatmap_with_bed.sh <bed_file> > <masked_heatmap_data>
# <bed_file>: bed file to mask heatmap data with in the standard bed format (can contain spaces instead of tabs
#             as a separator). Must contain at least four columns with no column name: contig, start, end, read_id.
# <heatmap_data>: tab-separated file with comments starting with #,with no column names, and with columns:
#                 contig, start, end, x1, x2, read_id, x3, x4. (x1, x2, x3, x4 mean any column here is allowed).
#                 This is a file probably generated by our script run_get_read_brdU_ref_coord_generated_reg_int.sh or
#                 equivalent.
# <masked_heatmap_data>: same as <heatmap_data> but with an additional column at the end that contains the transparency
#                        value for each row (0-1). Warning: rows may not be in the same order as in <heatmap_data>.

# logic
# -----
# Any heatmap window that falls 100% within a bed file window with the same read id will have a transparency value of 1.
# Every other window will have a transparency value of 0.
# NOTE: this means the bed file must contain windows larger than the heatmap windows.

# stop execution if any command fails
set -e

# load packages
source load_package.sh -bedtools

# load configuration
source config.sh

# set temporary directory
tmp_dir="${config[scratchDir]:-}"/tmp/temp$(openssl rand -hex 6)
mkdir -p "$tmp_dir"

# set temporary files
tmp_file_win=$(mktemp "$tmp_dir"/XXXXXX)
tmp_out=$(mktemp "$tmp_dir"/XXXXXX)

# convert input heatmap data to the standard bed format by switching columns 4 and 6
cat | grep -v '^#' |\
  awk -v OFS="\t" '{print $1, $2, $3, $6, $5, $4, $7, $8}' |\
  sort -k1,1 -k2,2n  > "$tmp_file_win"

# check that this file is not empty
if [ ! -s "$tmp_file_win" ]; then
  echo "No heatmap data provided"
  exit 0
fi

# mask heatmap with bed file
< "$1" awk -v OFS="\t" '{print $1, $2, $3, $4}' |\
  sort -k1,1 -k2,2n  |\
  bedtools intersect -a "$tmp_file_win" -b - -sorted -wo  |\
  awk -v OFS="\t" '($3 - $2 == $13 && $4 == $12){print $1, $2, $3, $4, $5, $6, $7, $8}' > "$tmp_out"

# locate lines in heatmap data that are not in the bed file
# print them first, followed by the rest of the data,
# remembering to switch columns 4 and 6 back to their original positions
{
  grep -v -F -f "$tmp_out" "$tmp_file_win" |\
    awk -v OFS="\t" '{print $1, $2, $3, $6, $5, $4, $7, $8, "0"}'
  awk -v OFS="\t" '{print $1, $2, $3, $6, $5, $4, $7, $8, "1"}' "$tmp_out"
} | sort -k1,1 -k2,2n

# remove temporary files
rm -rf "$tmp_dir"