import sys

# Written using ChatGPT


def adjust_config_toml(file_path: str, mod_bases: str, mod_long_names_0: str) -> None:
    """ Adjust the 'modbases' and 'mod_long_names_0' values in a config file.

    Args:
        file_path: The path to the config file config.toml
        mod_bases: Short code for the modified base e.g. 'm'
        mod_long_names_0: Long name for the modified base e.g. '5mC'

    Returns:
        None
    """
    # read lines from the file
    with open(file_path, 'r') as file:
        lines = file.readlines()

    # Set flags and counters
    in_modbases_section = False
    modbases_count = 0
    mod_long_names_0_count = 0
    modbases_index = None
    mod_long_names_0_index = None

    # Find the 'modbases' and 'mod_long_names_0' entries in the 'modbases' section
    for i, line in enumerate(lines):
        stripped_line = line.strip()

        if stripped_line.startswith('['):
            in_modbases_section = stripped_line == '[modbases]'

        if in_modbases_section:

            # replace the modbases and mod_long_names_0 values
            if stripped_line.startswith('mod_bases ='):
                modbases_count += 1
                if modbases_count > 1:
                    raise ValueError("Multiple 'mod_bases =' entries found in 'modbases' section")
                modbases_index = i

            if stripped_line.startswith('mod_long_names_0 ='):
                mod_long_names_0_count += 1
                if mod_long_names_0_count > 1:
                    raise ValueError("Multiple 'mod_long_names_0 =' entries found in 'modbases' section")
                mod_long_names_0_index = i

    # raise an error if the 'modbases' and 'mod_long_names_0' entries are not found
    if modbases_count == 0:
        raise ValueError("No 'modbases =' entry found in 'modbases' section")

    if mod_long_names_0_count == 0:
        raise ValueError("No 'mod_long_names_0 =' entry found in 'modbases' section")

    # Update the lines
    lines[modbases_index] = f'mod_bases = "{mod_bases}"\n'
    lines[mod_long_names_0_index] = f'mod_long_names_0 = "{mod_long_names_0}"\n'

    # Write the updated lines back to the file
    with open(file_path, 'w') as file:
        file.writelines(lines)


if __name__ == "__main__":

    # The basic problem is that in config.toml generated by remora from our BrdUd data, we get the fields
    # [modbases]
    # mod_bases = [ "T",]
    # mod_long_names_0 = "T"
    # While these are fine, dorado has a problem with them.
    # ST found a fix where if he sets
    # mod_bases = "m"
    # mod_long_names_0 = "5mC"
    # then dorado works fine, and we can use modkit to revert to a T tag afterward.
    # So, this script is to adjust the config.toml file to have these values.
    # We hope ONT will fix this issue in the future, and we can remove this script.

    if len(sys.argv) != 4:
        print("Usage: python adjust_config_toml.py <config_file_path> <mod_bases_value> <mod_long_names_0_value>")
        print("Example: python adjust_config_toml.py config.toml 1 0")
        print("We adjust the config.toml at two locations because dorado is not able to deal with some tags")
        print("This is a config file associated with modification-calling models and is part of the input to dorado")
        print("So we alter the file, run dorado, and then adjust the tags in the modbam file to the original values")
        sys.exit(1)

    # Get the arguments
    config_file_path = sys.argv[1]
    mod_bases_value = sys.argv[2]
    mod_long_names_0_value = sys.argv[3]

    # Adjust the config file
    try:
        adjust_config_toml(config_file_path, mod_bases_value, mod_long_names_0_value)
    except ValueError as e:
        print(e)
        sys.exit(1)
